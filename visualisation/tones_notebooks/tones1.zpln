{
 "paragraphs": [
  {
   "text": "%dep\n\n\nimport org.aopalliance.reflect.Class\n\nz.reset()\nz.load(\"/zeppelin/local-repo/mysql-connector-java-5.1.6.jar\")",
   "user": "anonymous",
   "dateUpdated": "2020-01-20T14:31:41+0000",
   "config": {
    "editorSetting": {
     "language": "scala",
     "editOnDblClick": false,
     "completionKey": "TAB",
     "completionSupport": true
    },
    "colWidth": 12.0,
    "editorMode": "ace/mode/scala",
    "fontSize": 9.0,
    "results": {},
    "enabled": true
   },
   "settings": {
    "params": {},
    "forms": {}
   },
   "results": {
    "code": "ERROR",
    "msg": [
     {
      "type": "TEXT",
      "data": "Must be used before SparkInterpreter (%spark) initialized\nHint: put this paragraph before any Spark code and restart Zeppelin/Interpreter"
     }
    ]
   },
   "apps": [],
   "jobName": "paragraph_1579530701519_-737184799",
   "id": "20200120-143141_1754473583",
   "dateCreated": "2020-01-20T14:31:41+0000",
   "dateStarted": "2020-01-20T14:31:41+0000",
   "dateFinished": "2020-01-20T14:31:41+0000",
   "status": "ERROR",
   "progressUpdateIntervalMs": 500.0
  },
  {
   "text": "%spark\n\nimport org.apache.spark.sql._\n\ndef printQueryResultsAsTable(dataFrame: DataFrame): Unit = {\n    print(\"%table\\n\" + dataFrame.columns.mkString(\"\\t\") + '\\n' + dataFrame.map(x => x.mkString(\"\\t\")).collect().mkString(\"\\n\"))\n}\n\ndef getDataFrame(query: String, columnNames: Seq[String]): DataFrame = {\n    //    print(query)\n    val df = sqlContext.read.format(\"jdbc\").option(\"driver\", \"com.mysql.jdbc.Driver\")\n            .option(\"url\", \"jdbc:mysql://maria-gdelt:3306/bd_gdelt\")\n            .option(\"databaseName\", \"bd_gdelt\")\n            .option(\"user\", \"root\")\n            .option(\"password\", \"root\")\n            .option(\"dbtable\", query)\n            .load()\n            .toDF(columnNames: _*)\n    return df\n}\n",
   "user": "anonymous",
   "dateUpdated": "2020-01-20T14:31:41+0000",
   "config": {},
   "settings": {
    "params": {
     "Date published >=": "",
     "Country name LIKE": "",
     "bdtMeta": {
      "inlay": {
       "state": {
        "currentPage": "Console",
        "chart": {
         "series": [
          {
           "type": "Line",
           "x": {
            "column": "Date published",
            "index": 0.0
           },
           "y": {
            "column": "Tone",
            "index": 2.0
           }
          }
         ]
        }
       }
      }
     }
    },
    "forms": {}
   },
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "\nimport org.apache.spark.sql._\n\nprintQueryResultsAsTable: (dataFrame: org.apache.spark.sql.DataFrame)Unit\n\ngetDataFrame: (query: String, columnNames: Seq[String])org.apache.spark.sql.DataFrame\n"
     }
    ]
   },
   "apps": [],
   "jobName": "paragraph_1579530701532_-731413565",
   "id": "20200120-143141_343113764",
   "dateCreated": "2020-01-20T14:31:41+0000",
   "dateStarted": "2020-01-20T14:31:41+0000",
   "dateFinished": "2020-01-20T14:31:43+0000",
   "status": "FINISHED",
   "progressUpdateIntervalMs": 500.0
  },
  {
   "text": "%spark\n\nval sqlQueryArticle =\n    \"\"\"(SELECT * FROM (SELECT a.date_published, a.date_event, a.tone, a.country_id, c.name FROM article a\n                            JOIN country c on c.id = a.country_id \n                            ORDER BY a.date_published ASC, a.tone ASC) tones_prep ${0} ORDER BY date_published ASC, tone ASC) AS tones\"\"\"\n\nval columnNamesArticle = Seq(\"Date published\", \"Date event\", \"Tone\", \"Country ID\", \"Country name\")\n\nval articleDatePublished = z.input(\"Date published >=\")\nval countryName = z.input(\"Country name LIKE\")\n\nvar conditionsArticle = List[String]()\nif (articleDatePublished != \"\") {\n    conditionsArticle = (\"date_published >= '\" + articleDatePublished + \"'\") :: conditionsArticle\n}\nif (countryName != \"\") {\n    conditionsArticle = (\"name LIKE '%\" + countryName + \"%'\") :: conditionsArticle\n}\n\nval condJoinedArticle = (if (conditionsArticle.isEmpty) \"\" else \"WHERE \") + conditionsArticle.mkString(\" AND \")\nval dfArticle = getDataFrame(sqlQueryArticle.replace(\"${0}\", condJoinedArticle), columnNamesArticle).orderBy(asc(\"tone\")).orderBy(asc(\"date_published\"))\nprintQueryResultsAsTable(dfArticle)\n\n\n",
   "user": "anonymous",
   "dateUpdated": "2020-01-20T14:31:41+0000",
   "config": {},
   "settings": {
    "params": {
     "Date published >=": "",
     "Country name LIKE": ""
    },
    "forms": {
     "Date published >=": {
      "name": "Date published >=",
      "displayName": "Date published >=",
      "type": "input",
      "defaultValue": "",
      "hidden": false
     },
     "Country name LIKE": {
      "name": "Country name LIKE",
      "displayName": "Country name LIKE",
      "type": "input",
      "defaultValue": "",
      "hidden": false
     }
    }
   },
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "\n\n\n\nsqlQueryArticle: String =\n(SELECT * FROM (SELECT a.date_published, a.date_event, a.tone, a.country_id, c.name FROM article a\n                            JOIN country c on c.id = a.country_id\n                            ORDER BY a.date_published ASC, a.tone ASC) tones_prep ${0} ORDER BY date_published ASC, tone ASC) AS tones\n\ncolumnNamesArticle: Seq[String] = List(Date published, Date event, Tone, Country ID, Country name)\n\narticleDatePublished: Object = \"\"\n\ncountryName: Object = \"\"\n\nconditionsArticle: List[String] = List()\n\ncondJoinedArticle: String = \"\"\n\ndfArticle: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [Date published: date, Date event: date ... 3 more fields]\n"
     },
     {
      "type": "TABLE",
      "data": "Date published\tDate event\tTone\tCountry ID\tCountry name\n2019-12-19\t2019-12-19\t-21.05263\tVE\tVenezuela\n2019-12-19\t2019-12-19\t-13.01370\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t-11.76471\tIR\tIran\n2019-12-19\t2019-12-19\t-10.53812\tUK\t\"United Kingdom\"\n2019-12-19\t2019-12-19\t-9.59596\tIR\tIran\n2019-12-19\t2019-12-19\t-9.42029\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t-8.99743\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t-8.87097\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t-8.64745\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t-8.27680\tIR\tIran\n2019-12-19\t2019-12-07\t-8.27586\tIN\tIndia\n2019-12-19\t2019-12-19\t-8.14111\tIR\tIran\n2019-12-19\t2019-12-19\t-8.07692\tAS\tAustralia\n2019-12-19\t2019-12-19\t-7.82313\tIZ\tIraq\n2019-12-19\t2019-12-19\t-7.66234\tAF\tAfghanistan\n2019-12-19\t2019-12-19\t-7.26469\tSY\tSyria\n2019-12-19\t2019-12-19\t-7.19823\tAS\tAustralia\n2019-12-19\t2019-12-19\t-6.88172\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t-6.77966\tPK\tPakistan\n2019-12-19\t2019-12-19\t-6.71892\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t-6.52463\tIN\tIndia\n2019-12-19\t2019-12-19\t-6.37312\tFR\tFrance\n2019-12-19\t2019-12-19\t-6.32530\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t-6.30137\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t-6.25000\tVM\tVietnam\n2019-12-19\t2019-12-19\t-6.24821\tIR\tIran\n2019-12-19\t2019-12-19\t-6.18102\tUK\t\"United Kingdom\"\n2019-12-19\t2019-12-19\t-6.04027\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t-6.03217\tIR\tIran\n2019-12-19\t2019-12-19\t-5.98923\tIR\tIran\n2019-12-19\t2019-12-19\t-5.95855\tIR\tIran\n2019-12-19\t2019-12-19\t-5.95223\tLE\tLebanon\n2019-12-19\t2019-12-19\t-5.93750\tFR\tFrance\n2019-12-19\t2019-12-19\t-5.93220\tIZ\tIraq\n2019-12-19\t2019-12-19\t-5.88235\tIN\tIndia\n2019-12-19\t2019-12-19\t-5.79268\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t-5.76923\tSO\tSomalia\n2019-12-19\t2019-12-19\t-5.60000\tIR\tIran\n2019-12-19\t2019-12-19\t-5.59006\tIR\tIran\n2019-12-19\t2019-12-19\t-5.47945\tLY\tLibya\n2019-12-19\t2019-12-19\t-5.43735\tIR\tIran\n2019-12-19\t2019-12-30\t-5.33708\tIR\tIran\n2019-12-19\t2019-12-19\t-5.27704\tIR\tIran\n2019-12-19\t2019-12-19\t-5.22621\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t-5.17799\tKU\tKuwait\n2019-12-19\t2019-12-19\t-5.05618\tJA\tJapan\n2019-12-19\t2019-12-19\t-5.03686\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t-4.93827\tIZ\tIraq\n2019-12-19\t2019-12-19\t-4.91284\tIR\tIran\n2019-12-19\t2019-12-19\t-4.88599\tBO\tBelarus\n2019-12-19\t2019-12-19\t-4.74934\tAS\tAustralia\n2019-12-19\t2019-12-19\t-4.70383\tIN\tIndia\n2019-12-19\t2019-12-19\t-4.49640\tIR\tIran\n2019-12-19\t2019-12-19\t-4.47248\tHK\t\"Hong Kong\"\n2019-12-19\t2019-12-19\t-4.46927\tIS\tIsrael\n2019-12-19\t2019-12-19\t-4.14013\tRP\tPhilippines\n2019-12-19\t2019-12-19\t-4.07451\tVE\tVenezuela\n2019-12-19\t2019-12-19\t-4.04624\tSN\tSingapore\n2019-12-19\t2019-12-19\t-4.01530\tIS\tIsrael\n2019-12-19\t2019-12-19\t-4.00729\tYM\tYemen\n2019-12-19\t2019-12-19\t-3.89105\tIZ\tIraq\n2019-12-19\t2019-12-19\t-3.88060\tBR\tBrazil\n2019-12-19\t2019-12-19\t-3.66972\tIR\tIran\n2019-12-19\t2019-12-19\t-3.62595\tAS\tAustralia\n2019-12-19\t2019-12-19\t-3.50000\tIN\tIndia\n2019-12-19\t2019-12-19\t-3.48189\tIR\tIran\n2019-12-19\t2019-12-19\t-3.40000\tAE\t\"United Arab Emirates\"\n2019-12-19\t2019-12-19\t-3.37838\tQA\tQatar\n2019-12-19\t2019-12-19\t-3.32326\tIZ\tIraq\n2019-12-19\t2019-12-19\t-3.31675\tIN\tIndia\n2019-12-19\t2019-12-19\t-3.25203\tIR\tIran\n2019-12-19\t2019-12-19\t-3.13550\tFR\tFrance\n2019-12-19\t2019-12-19\t-3.08370\tAS\tAustralia\n2019-12-19\t2019-12-19\t-3.07882\tAS\tAustralia\n2019-12-19\t2019-12-19\t-3.04183\tFR\tFrance\n2019-12-19\t2019-12-19\t-2.90179\tGM\tGermany\n2019-12-19\t2019-12-19\t-2.88462\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t-2.85714\tIR\tIran\n2019-12-19\t2019-12-30\t-2.82609\tUK\t\"United Kingdom\"\n2019-12-19\t2019-12-19\t-2.66990\tUP\tUkraine\n2019-12-19\t2019-12-19\t-2.64423\tIZ\tIraq\n2019-12-19\t2019-12-19\t-2.36686\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t-2.34114\tAS\tAustralia\n2019-12-19\t2019-12-19\t-2.30516\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t-2.22445\tPK\tPakistan\n2019-12-19\t2019-12-19\t-2.15633\tIR\tIran\n2019-12-19\t2019-12-19\t-2.04778\tAS\tAustralia\n2019-12-19\t2019-12-19\t-2.01342\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t-2.00000\tAS\tAustralia\n2019-12-19\t2019-12-19\t-1.85811\tIR\tIran\n2019-12-19\t2019-12-19\t-1.55763\tHK\t\"Hong Kong\"\n2019-12-19\t2019-12-19\t-1.53846\tGM\tGermany\n2019-12-19\t2019-12-19\t-1.49477\tCA\tCanada\n2019-12-19\t2019-12-19\t-1.47992\tCH\tChina\n2019-12-19\t2019-12-19\t-1.35266\tCH\tChina\n2019-12-19\t2019-12-19\t-1.04781\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t-1.01010\tUK\t\"United Kingdom\"\n2019-12-19\t2019-12-19\t-0.90293\tIZ\tIraq\n2019-12-19\t2019-12-19\t-0.59809\tFR\tFrance\n2019-12-19\t2019-12-19\t-0.50505\tTW\tTaiwan\n2019-12-19\t2019-12-19\t-0.50167\tUK\t\"United Kingdom\"\n2019-12-19\t2019-12-19\t-0.37594\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t-0.33784\tPK\tPakistan\n2019-12-19\t2019-12-19\t-0.28490\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t-0.25907\tCA\tCanada\n2019-12-19\t2019-12-19\t0.00000\tBD\tBermuda\n2019-12-19\t2019-12-19\t0.00000\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t0.00000\tSN\tSingapore\n2019-12-19\t2019-12-19\t0.12739\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t0.34483\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t0.43478\tNO\tNorway\n2019-12-19\t2019-12-19\t0.68571\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t0.79051\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t0.85679\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t0.91743\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t0.94877\tUK\t\"United Kingdom\"\n2019-12-19\t2019-12-19\t0.97087\tUK\t\"United Kingdom\"\n2019-12-19\t2019-12-19\t1.62075\tCH\tChina\n2019-12-19\t2019-12-19\t1.62791\tAS\tAustralia\n2019-12-19\t2019-12-19\t1.78838\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t1.79283\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t1.91693\tHK\t\"Hong Kong\"\n2019-12-19\t2019-12-19\t2.07852\tRP\tPhilippines\n2019-12-19\t2019-12-19\t2.13746\tEN\tEstonia\n2019-12-19\t2019-12-30\t2.20994\tCH\tChina\n2019-12-19\t2019-12-19\t2.24138\tCH\tChina\n2019-12-19\t2019-12-19\t2.32020\tJA\tJapan\n2019-12-19\t2019-12-19\t2.41010\tHA\tHaiti\n2019-12-19\t2019-12-19\t2.52525\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t2.55102\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t2.57143\tJA\tJapan\n2019-12-19\t2019-12-19\t2.76243\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t2.76923\tMX\tMexico\n2019-12-19\t2019-12-19\t2.92683\tIN\tIndia\n2019-12-19\t2019-12-19\t2.96736\tAC\t\"Antigua and Barbuda\"\n2019-12-19\t2019-12-19\t3.18725\tSN\tSingapore\n2019-12-19\t2019-12-19\t3.21199\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t3.33333\tTH\tThailand\n2019-12-19\t2019-12-19\t3.42105\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t3.54839\tAS\tAustralia\n2019-12-19\t2019-12-30\t3.60360\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t3.65059\tRP\tPhilippines\n2019-12-19\t2019-12-19\t3.78251\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t3.86905\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t3.89610\tCH\tChina\n2019-12-19\t2019-12-19\t4.01235\tVM\tVietnam\n2019-12-19\t2019-12-19\t4.16667\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t4.45205\tCH\tChina\n2019-12-19\t2019-12-19\t4.62963\tMX\tMexico\n2019-12-19\t2019-12-19\t4.84211\tPK\tPakistan\n2019-12-19\t2019-12-19\t6.74157\tEI\tIreland\n2019-12-19\t2019-12-19\t6.84932\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t7.09951\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t7.31707\tAS\tAustralia\n2019-12-19\t2019-12-19\t7.78071\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t7.95892\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t9.94152\tUS\t\"United States\"\n2019-12-19\t2019-12-19\t10.25641\tSN\tSingapore\n2020-01-08\t2020-01-08\t-7.69231\tIZ\tIraq\n2020-01-08\t2020-01-08\t-7.37327\tIS\tIsrael\n2020-01-08\t2020-01-08\t-7.28597\tCY\tCyprus\n2020-01-08\t2020-01-08\t-6.39731\tUS\t\"United States\"\n2020-01-08\t2020-01-08\t-6.34058\tJA\tJapan\n2020-01-08\t2020-01-08\t-5.80110\tUK\t\"United Kingdom\"\n2020-01-08\t2020-01-01\t-4.09836\tSN\tSingapore\n2020-01-08\t2020-01-08\t-3.44569\tIZ\tIraq\n2020-01-08\t2020-01-08\t-3.04487\tUS\t\"United States\"\n2020-01-08\t2020-01-08\t-2.48566\tEG\tEgypt\n2020-01-08\t2020-01-08\t-1.40351\tAS\tAustralia\n2020-01-08\t2020-01-08\t-0.54645\tEN\tEstonia\n2020-01-08\t2020-01-08\t0.00000\tMP\tMauritius\n2020-01-08\t2020-01-08\t0.23077\tUS\t\"United States\"\n2020-01-08\t2020-01-08\t1.05263\tVM\tVietnam\n2020-01-08\t2020-01-08\t1.24481\tUS\t\"United States\"\n2020-01-08\t2020-01-08\t1.94715\tAU\tAustria\n2020-01-08\t2020-01-08\t3.01508\tUS\t\"United States\"\n2020-01-08\t2020-01-08\t3.47722\tJA\tJapan\n2020-01-08\t2020-01-08\t3.79747\tCA\tCanada\n2020-01-08\t2020-01-08\t8.89621\tRP\tPhilippines\n2020-01-17\t2020-01-17\t-13.33333\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-9.67742\tRP\tPhilippines\n2020-01-17\t2020-01-17\t-8.91304\tBE\tBelgium\n2020-01-17\t2020-01-17\t-8.65801\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-7.40157\tIR\tIran\n2020-01-17\t2020-01-17\t-7.39958\tIR\tIran\n2020-01-17\t2020-01-17\t-7.34463\tIR\tIran\n2020-01-17\t2020-01-17\t-7.30337\tUP\tUkraine\n2020-01-17\t2020-01-17\t-6.33284\tBK\t\"Bosnia and Herzegovina\"\n2020-01-17\t2020-01-17\t-6.33245\tMY\tMalaysia\n2020-01-17\t2020-01-17\t-6.25000\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-6.01852\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-5.98007\tAS\tAustralia\n2020-01-17\t2020-01-17\t-5.96591\tSN\tSingapore\n2020-01-17\t2020-01-17\t-5.90112\tIR\tIran\n2020-01-17\t2020-01-17\t-5.88235\tCY\tCyprus\n2020-01-17\t2020-01-17\t-5.74713\tSZ\tSwitzerland\n2020-01-17\t2020-01-17\t-5.71031\tIR\tIran\n2020-01-17\t2020-01-17\t-5.67164\tAS\tAustralia\n2020-01-17\t2020-01-17\t-5.58583\tIR\tIran\n2020-01-17\t2020-01-17\t-5.50847\tAS\tAustralia\n2020-01-17\t2020-01-17\t-5.39130\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-5.25547\tAS\tAustralia\n2020-01-17\t2020-01-17\t-5.21739\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-5.09259\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-5.06667\tBG\tBangladesh\n2020-01-17\t2020-01-17\t-5.01567\tUK\t\"United Kingdom\"\n2020-01-17\t2020-01-17\t-4.88385\tLY\tLibya\n2020-01-17\t2020-01-17\t-4.86891\tIR\tIran\n2020-01-17\t2020-01-17\t-4.84848\tAO\tAngola\n2020-01-17\t2020-01-17\t-4.76190\tIR\tIran\n2020-01-17\t2020-01-17\t-4.72028\tEG\tEgypt\n2020-01-17\t2020-01-17\t-4.65116\tBG\tBangladesh\n2020-01-17\t2020-01-17\t-4.61255\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-4.60705\tIR\tIran\n2020-01-17\t2020-01-17\t-4.58971\tUK\t\"United Kingdom\"\n2020-01-17\t2020-01-17\t-4.56700\tGM\tGermany\n2020-01-17\t2020-01-17\t-4.55598\tIN\tIndia\n2020-01-17\t2020-01-17\t-4.55105\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-4.44444\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-4.43350\tIN\tIndia\n2020-01-17\t2020-01-17\t-4.39122\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-4.31211\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-4.23880\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-4.14201\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-4.08163\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-4.02145\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-3.98860\tUP\tUkraine\n2020-01-17\t2020-01-17\t-3.92157\tCA\tCanada\n2020-01-17\t2020-01-17\t-3.91566\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-3.75701\tIN\tIndia\n2020-01-17\t2020-01-17\t-3.65297\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-3.61991\tTH\tThailand\n2020-01-17\t2020-01-17\t-3.59897\tIN\tIndia\n2020-01-17\t2020-01-17\t-3.57143\tSP\tSpain\n2020-01-17\t2020-01-17\t-3.52941\tHK\t\"Hong Kong\"\n2020-01-17\t2020-01-17\t-3.38983\tUK\t\"United Kingdom\"\n2020-01-17\t2020-01-17\t-3.33333\tIR\tIran\n2020-01-17\t2020-01-17\t-3.21533\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-3.14961\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-3.11284\tIR\tIran\n2020-01-17\t2020-01-10\t-3.07692\tIT\tItaly\n2020-01-17\t2019-01-17\t-3.07329\tUK\t\"United Kingdom\"\n2020-01-17\t2020-01-17\t-2.99145\tCH\tChina\n2020-01-17\t2020-01-17\t-2.98507\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-2.97872\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-2.92398\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-2.88462\tNZ\t\"New Zealand\"\n2020-01-17\t2020-01-17\t-2.88066\tIR\tIran\n2020-01-17\t2020-01-17\t-2.72480\tIZ\tIraq\n2020-01-17\t2020-01-17\t-2.69360\tRP\tPhilippines\n2020-01-17\t2020-01-17\t-2.57568\tLY\tLibya\n2020-01-17\t2020-01-17\t-2.41112\tAJ\tAzerbaijan\n2020-01-17\t2020-01-17\t-2.38908\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-2.33813\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-2.00861\tGM\tGermany\n2020-01-17\t2020-01-17\t-1.99387\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-1.93798\tUK\t\"United Kingdom\"\n2020-01-17\t2020-01-17\t-1.92308\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-1.89781\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-1.81818\tIZ\tIraq\n2020-01-17\t2020-01-17\t-1.73516\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-1.69133\tCH\tChina\n2020-01-17\t2020-01-17\t-1.61565\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-1.57480\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-1.41844\tRS\tRussia\n2020-01-17\t2020-01-17\t-1.41458\tFR\tFrance\n2020-01-17\t2020-01-17\t-1.38889\tRP\tPhilippines\n2020-01-17\t2020-01-17\t-1.34907\tSG\tSenegal\n2020-01-17\t2020-01-17\t-1.29241\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-1.23239\tSN\tSingapore\n2020-01-17\t2020-01-17\t-1.14566\tMX\tMexico\n2020-01-17\t2020-01-17\t-1.05263\tEG\tEgypt\n2020-01-17\t2020-01-17\t-0.91185\tJA\tJapan\n2020-01-17\t2020-01-17\t-0.81191\tIR\tIran\n2020-01-17\t2020-01-17\t-0.81136\tGM\tGermany\n2020-01-17\t2020-01-17\t-0.74906\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-0.70755\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-0.63091\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-0.63091\tFR\tFrance\n2020-01-17\t2020-01-17\t-0.53763\tBE\tBelgium\n2020-01-17\t2020-01-17\t-0.48309\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-0.41152\tUP\tUkraine\n2020-01-17\t2020-01-17\t-0.27548\tRS\tRussia\n2020-01-17\t2020-01-17\t-0.16892\tUP\tUkraine\n2020-01-17\t2020-01-17\t0.00000\tWA\tNamibia\n2020-01-17\t2020-01-17\t0.00000\tPK\tPakistan\n2020-01-17\t2020-01-17\t0.00000\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t0.00000\tSY\tSyria\n2020-01-17\t2020-01-17\t0.00000\tUP\tUkraine\n2020-01-17\t2020-01-17\t0.00000\tCH\tChina\n2020-01-17\t2020-01-17\t0.10905\tCH\tChina\n2020-01-17\t2020-01-17\t0.26738\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t0.38168\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t0.40420\tPE\tPeru\n2020-01-17\t2020-01-17\t0.43573\tCH\tChina\n2020-01-17\t2020-01-17\t0.50420\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t0.62893\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t0.65646\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t0.67114\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t0.79576\tVE\tVenezuela\n2020-01-17\t2020-01-17\t0.80160\tUK\t\"United Kingdom\"\n2020-01-17\t2020-01-17\t0.85379\tFR\tFrance\n2020-01-17\t2020-01-17\t0.91743\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t0.92807\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t1.11607\tIT\tItaly\n2020-01-17\t2020-01-17\t1.14286\tRS\tRussia\n2020-01-17\t2020-01-17\t1.35468\tMY\tMalaysia\n2020-01-17\t2020-01-17\t1.43885\tEI\tIreland\n2020-01-17\t2020-01-17\t1.50565\tMC\tMacau\n2020-01-17\t2020-01-17\t1.56556\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t1.71920\tCH\tChina\n2020-01-17\t2020-01-17\t1.75439\tUK\t\"United Kingdom\"\n2020-01-17\t2020-01-17\t1.89329\tCH\tChina\n2020-01-17\t2020-01-17\t1.96721\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t1.99780\tTW\tTaiwan\n2020-01-17\t2020-01-17\t2.04461\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t2.43506\tCH\tChina\n2020-01-17\t2020-01-17\t2.45536\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t2.47543\tCA\tCanada\n2020-01-17\t2020-01-17\t2.50000\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t2.76873\tNL\tNetherlands\n2020-01-17\t2020-01-17\t2.77778\tCI\tChile\n2020-01-17\t2020-01-17\t2.80112\tVM\tVietnam\n2020-01-17\t2020-01-17\t2.84091\tJA\tJapan\n2020-01-17\t2020-01-17\t3.04428\tGI\tGibraltar\n2020-01-17\t2020-01-17\t3.08008\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t3.19549\tFR\tFrance\n2020-01-17\t2020-01-17\t3.26279\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t3.43137\tUK\t\"United Kingdom\"\n2020-01-17\t2020-01-17\t3.47349\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t3.76344\tIN\tIndia\n2020-01-17\t2020-01-17\t3.89262\tID\tIndonesia\n2020-01-17\t2020-01-17\t4.19287\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t4.48718\tCH\tChina\n2020-01-17\t2020-01-17\t4.74517\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t5.09259\tMX\tMexico\n2020-01-17\t2020-01-17\t5.33817\tSN\tSingapore\n2020-01-17\t2020-01-17\t5.91133\tSZ\tSwitzerland\n2020-01-17\t2020-01-17\t6.17284\tUK\t\"United Kingdom\"\n2020-01-17\t2020-01-17\t6.47182\tCH\tChina"
     }
    ]
   },
   "apps": [],
   "jobName": "paragraph_1579530701545_-748727266",
   "id": "20200120-143141_584329522",
   "dateCreated": "2020-01-20T14:31:41+0000",
   "dateStarted": "2020-01-20T14:31:41+0000",
   "dateFinished": "2020-01-20T14:31:50+0000",
   "status": "FINISHED",
   "progressUpdateIntervalMs": 500.0
  },
  {
   "text": "%spark\n//class CountryTone(id: Int, related_month: Date, start_date: Date, end_date: Date, articles_number: Int, last_published_date: Date, load_date: Date, country_id: String)\n\nval sqlQueryCountryTone = \"\"\"(SELECT ct.id, ct.related_month, ct.start_date, ct.end_date, ct.articles_number, ct.mood, ct.last_published_date, ct.country_id, ct.load_date FROM country_tone ct) AS country_tones\"\"\"\nval columnNamesCountryTone = Seq(\"ID\", \"Related month\", \"Start date\", \"End date\", \"Articles number\", \"Mood\", \"Last published date\", \"Country ID\", \"Load date\")\nval dfCountryTone = getDataFrame(sqlQueryCountryTone, columnNamesCountryTone)\nprintQueryResultsAsTable(dfCountryTone)",
   "user": "anonymous",
   "dateUpdated": "2020-01-20T14:31:44+0000",
   "config": {},
   "settings": {
    "params": {
     "bdtMeta": {
      "inlay": {
       "state": {
        "currentPage": "Console",
        "table": {
         "visibleRow": -1.0
        }
       }
      }
     }
    },
    "forms": {}
   },
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "\nsqlQueryCountryTone: String = (SELECT ct.id, ct.related_month, ct.start_date, ct.end_date, ct.articles_number, ct.mood, ct.last_published_date, ct.country_id, ct.load_date FROM country_tone ct) AS country_tones\n\ncolumnNamesCountryTone: Seq[String] = List(ID, Related month, Start date, End date, Articles number, Mood, Last published date, Country ID, Load date)\n\ndfCountryTone: org.apache.spark.sql.DataFrame = [ID: int, Related month: date ... 7 more fields]\n"
     },
     {
      "type": "TABLE",
      "data": "ID\tRelated month\tStart date\tEnd date\tArticles number\tMood\tLast published date\tCountry ID\tLoad date\n"
     }
    ]
   },
   "apps": [],
   "jobName": "paragraph_1579530701557_-741032288",
   "id": "20200120-143141_113225263",
   "dateCreated": "2020-01-20T14:31:41+0000",
   "dateStarted": "2020-01-20T14:31:44+0000",
   "dateFinished": "2020-01-20T14:31:52+0000",
   "status": "FINISHED",
   "progressUpdateIntervalMs": 500.0
  },
  {
   "text": "%spark\n\nimport org.apache.spark.sql.SaveMode\n\nval columnNamesCountryToneForCountryIdAndDate = Seq(\"id\", \"related_month\", \"start_date\", \"end_date\", \"articles_number\", \"mood\", \"last_published_date\", \"country_id\", \"load_date\")\n\ndef printQueryResultsAsTable(dataFrame: DataFrame): Unit = {\n    print(\"%table\\n\" + dataFrame.columns.mkString(\"\\t\") + '\\n' + dataFrame.map(x => x.mkString(\"\\t\")).collect().mkString(\"\\n\"))\n}\ndef getMoodFromArticle(tone: BigDecimal): String = {\n    if (tone >= 0.0) \"positive\" else \"negative\"\n}\n\ndef writeDataFrame(dataFrame: DataFrame, tableName: String, mode: SaveMode): Unit = {\n    //    println(dataFrame)\n    dataFrame.write\n            .format(\"jdbc\")\n            .mode(mode)\n            .option(\"driver\", \"com.mysql.jdbc.Driver\")\n            .option(\"url\", \"jdbc:mysql://maria-gdelt:3306/bd_gdelt\")\n            .option(\"databaseName\", \"bd_gdelt\")\n            .option(\"user\", \"root\")\n            .option(\"password\", \"root\")\n            .option(\"dbtable\", tableName)\n            .save()\n}\n",
   "user": "anonymous",
   "dateUpdated": "2020-01-20T14:31:51+0000",
   "config": {},
   "settings": {
    "params": {},
    "forms": {}
   },
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "\nimport org.apache.spark.sql.SaveMode\n\ncolumnNamesCountryToneForCountryIdAndDate: Seq[String] = List(id, related_month, start_date, end_date, articles_number, mood, last_published_date, country_id, load_date)\n\nprintQueryResultsAsTable: (dataFrame: org.apache.spark.sql.DataFrame)Unit\n\ngetMoodFromArticle: (tone: BigDecimal)String\n\nwriteDataFrame: (dataFrame: org.apache.spark.sql.DataFrame, tableName: String, mode: org.apache.spark.sql.SaveMode)Unit\n"
     }
    ]
   },
   "apps": [],
   "jobName": "paragraph_1579530701584_-652924790",
   "id": "20200120-143141_1495661653",
   "dateCreated": "2020-01-20T14:31:41+0000",
   "dateStarted": "2020-01-20T14:31:51+0000",
   "dateFinished": "2020-01-20T14:31:55+0000",
   "status": "FINISHED",
   "progressUpdateIntervalMs": 500.0
  },
  {
   "text": "%spark\n\nimport java.util.Calendar\nimport java.sql.{Connection, DriverManager}\n\ndef deleteRow(tableName: String, id: Int): Unit = {\n    val myUrl = \"jdbc:mysql://maria-gdelt:3306/bd_gdelt\"\n    val conn = DriverManager.getConnection(myUrl, \"root\", \"root\");\n\n    val query = f\"DELETE FROM $tableName WHERE id=$id\"\n    val preparedStmt = conn.prepareStatement(query);\n    //    println(preparedStmt)\n    preparedStmt.executeUpdate();\n}\n\n\nfor (row <- dfArticle.collect) {\n    //for (row <- dfArticle.take(15)) {\n\n    val publishedDate = row.getDate(0)\n    val dateEvent = row.getDate(1)\n    val tone = row.getDecimal(2)\n    val countryId = row.getString(3)\n    val articleMood = getMoodFromArticle(tone)\n\n    val calendar = Calendar.getInstance()\n    calendar.setTime(dateEvent)\n\n    val dateEventYear = calendar.get(Calendar.YEAR)\n    val dateEventMonth = calendar.get(Calendar.MONTH) + 1\n\n    val sqlQueryForCountryToneGivenCountryIdAndDateEvent =\n        f\"\"\"(SELECT * FROM(SELECT ct.id, ct.related_month, ct.start_date, ct.end_date, ct.articles_number, ct.mood, ct.last_published_date, ct.country_id, ct.load_date FROM country_tone ct\n              WHERE end_date IS NULL\n              AND country_id = '$countryId'\n              AND YEAR(start_date) = $dateEventYear\n              AND MONTH(start_date) = $dateEventMonth\n              ) joined_country_tone_for_countryid_and_date) AS country_tone_for_countryid_and_date \"\"\"\n\n    val dfCountryToneForCountryIdAndDate = getDataFrame(sqlQueryForCountryToneGivenCountryIdAndDateEvent, columnNamesCountryToneForCountryIdAndDate)\n\n\n    if (dfCountryToneForCountryIdAndDate.collect().length == 1) {\n        // row exists\n        //        println(\"case 1\")\n\n        val dfRow = dfCountryToneForCountryIdAndDate.first()\n        val lastPublishedDate = dfRow.getDate(6)\n\n        if (!(lastPublishedDate.compareTo(publishedDate) < 0)) {\n            //            println(\"case 2\")\n            // ignore old articles\n            val rowMood = dfRow.getString(5)\n\n            if (articleMood == rowMood) {\n                //                println(\"case 3\")\n                // update = delete + insert\n                val idToDelete = dfRow.getInt(0)\n                deleteRow(\"country_tone\", idToDelete);\n\n                val updatedRecord = Seq(\n                    (dfRow.getDate(1),\n                            dfRow.getDate(2),\n                            dfRow.getInt(4) + 1,\n                            dfRow.getString(5),\n                            publishedDate,\n                            dfRow.getString(7))\n                ).toDF(\"related_month\", \"start_date\", \"articles_number\", \"mood\", \"last_published_date\", \"country_id\")\n                writeDataFrame(updatedRecord.toDF, \"country_tone\", SaveMode.Append)\n            }\n            else {\n                //                println(\"case 4\")\n                // update = delete + insert\n                val idToDelete = dfRow.getInt(0)\n                deleteRow(\"country_tone\", idToDelete);\n\n                val updatedRecord = Seq(\n                    (dfRow.getDate(1),\n                            dfRow.getDate(2),\n                            dfRow.getDate(6), // update end_date = lastPublishedDate\n                            dfRow.getInt(4),\n                            dfRow.getString(5),\n                            dfRow.getDate(6),\n                            dfRow.getString(7))\n                ).toDF(\"related_month\", \"start_date\", \"end_date\", \"articles_number\", \"mood\", \"last_published_date\", \"country_id\")\n                writeDataFrame(updatedRecord.toDF, \"country_tone\", SaveMode.Append)\n\n                // new record\n                val newRecord = Seq(\n                    (publishedDate,\n                            publishedDate,\n                            1,\n                            articleMood,\n                            publishedDate,\n                            countryId)\n                ).toDF(\"related_month\", \"start_date\", \"articles_number\", \"mood\", \"last_published_date\", \"country_id\")\n                writeDataFrame(newRecord.toDF, \"country_tone\", SaveMode.Append)\n            }\n        }\n    } else {\n        //        println(\"case 5\")\n        // row does not exist\n\n        // searching for opened intervals for this country\n        val sqlQueryForCountryToneGivenCountryId =\n            f\"\"\"(SELECT * FROM(SELECT ct.id, ct.related_month, ct.start_date, ct.end_date, ct.articles_number, ct.mood, ct.last_published_date, ct.country_id, ct.load_date FROM country_tone ct\n              WHERE end_date IS NULL\n              AND country_id = '$countryId') joined_country_tone_for_countryid) AS country_tone_for_countryid \"\"\"\n        val dfCountryToneForCountryId = getDataFrame(sqlQueryForCountryToneGivenCountryId, columnNamesCountryToneForCountryIdAndDate)\n\n        for (notEndedRow <- dfCountryToneForCountryId.collect()) {\n            // performs update (delete + insert)\n            //            println(\"case 6\")\n\n            val idToDelete = notEndedRow.getInt(0)\n            deleteRow(\"country_tone\", idToDelete);\n\n            val newRecord = Seq(\n                (notEndedRow.getDate(1),\n                        notEndedRow.getDate(2),\n                        notEndedRow.getDate(6), // update end_date = lastPublishedDate\n                        notEndedRow.getInt(4),\n                        notEndedRow.getString(5),\n                        notEndedRow.getDate(6),\n                        notEndedRow.getString(7))\n            ).toDF(\"related_month\", \"start_date\", \"end_date\", \"articles_number\", \"mood\", \"last_published_date\", \"country_id\")\n            writeDataFrame(newRecord.toDF, \"country_tone\", SaveMode.Append)\n        }\n\n        // new record\n        val newRecord = Seq(\n            (publishedDate,\n                    publishedDate,\n                    1,\n                    articleMood,\n                    publishedDate,\n                    countryId)\n        ).toDF(\"related_month\", \"start_date\", \"articles_number\", \"mood\", \"last_published_date\", \"country_id\")\n        writeDataFrame(newRecord.toDF, \"country_tone\", SaveMode.Append)\n    }\n}\n",
   "user": "anonymous",
   "dateUpdated": "2020-01-20T14:31:53+0000",
   "config": {},
   "settings": {
    "params": {},
    "forms": {}
   },
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "\nimport java.util.Calendar\n\nimport java.sql.{Connection, DriverManager}\n\ndeleteRow: (tableName: String, id: Int)Unit\n"
     }
    ]
   },
   "apps": [],
   "jobName": "paragraph_1579530701607_-672546984",
   "id": "20200120-143141_993586556",
   "dateCreated": "2020-01-20T14:31:41+0000",
   "dateStarted": "2020-01-20T14:31:53+0000",
   "dateFinished": "2020-01-20T14:32:51+0000",
   "status": "FINISHED",
   "progressUpdateIntervalMs": 500.0
  },
  {
   "text": "%spark\n\n\nval sqlQueryCountry =\n    \"\"\"(SELECT * FROM (SELECT c.id, c.name FROM country c\n                            ) country_prep) AS country\"\"\"\nval columnNamesCountry = Seq(\"id\", \"name\")\n\nval dfAllCountries = getDataFrame(sqlQueryCountry, columnNamesCountry)\n\nprintQueryResultsAsTable(dfAllCountries)\n",
   "user": "anonymous",
   "dateUpdated": "2020-01-20T14:31:55+0000",
   "config": {},
   "settings": {
    "params": {},
    "forms": {}
   },
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "\n\n\nsqlQueryCountry: String =\n(SELECT * FROM (SELECT c.id, c.name FROM country c\n                            ) country_prep) AS country\n\ncolumnNamesCountry: Seq[String] = List(id, name)\n\ndfAllCountries: org.apache.spark.sql.DataFrame = [id: string, name: string]\n"
     },
     {
      "type": "TABLE",
      "data": "id\tname\nAA\tAruba\nAC\t\"Antigua and Barbuda\"\nAE\t\"United Arab Emirates\"\nAF\tAfghanistan\nAG\tAlgeria\nAJ\tAzerbaijan\nAL\tAlbania\nAM\tArmenia\nAN\tAndorra\nAO\tAngola\nAQ\t\"American Samoa\"\nAR\tArgentina\nAS\tAustralia\nAT\t\"Ashmore and Cartier Islands\"\nAU\tAustria\nAV\tAnguilla\nAX\tAkrotiri\nAY\tAntarctica\nBA\tBahrain\nBB\tBarbados\nBC\tBotswana\nBD\tBermuda\nBE\tBelgium\nBG\tBangladesh\nBH\tBelize\nBK\t\"Bosnia and Herzegovina\"\nBL\tBolivia\nBM\tBurma\nBN\tBenin\nBO\tBelarus\nBP\t\"Solomon Islands\"\nBQ\t\"Navassa Island\"\nBR\tBrazil\nBS\t\"Bassas da India\"\nBT\tBhutan\nBU\tBulgaria\nBV\t\"Bouvet Island\"\nBX\tBrunei\nBY\tBurundi\nCA\tCanada\nCB\tCambodia\nCD\tChad\nCE\t\"Sri Lanka\"\nCH\tChina\nCI\tChile\nCJ\t\"Cayman Islands\"\nCK\t\"Cocos (Keeling) Islands\"\nCM\tCameroon\nCN\tComoros\nCO\tColombia\nCQ\t\"Northern Mariana Islands\"\nCR\t\"Coral Sea Islands\"\nCS\t\"Costa Rica\"\nCT\t\"Central African Republic\"\nCU\tCuba\nCV\t\"Cape Verde\"\nCW\t\"Cook Islands\"\nCY\tCyprus\nDA\tDenmark\nDJ\tDjibouti\nDO\tDominica\nDQ\t\"Jarvis Island\"\nDR\t\"Dominican Republic\"\nDX\tDhekelia\nEC\tEcuador\nEG\tEgypt\nEI\tIreland\nEK\t\"Equatorial Guinea\"\nEN\tEstonia\nER\tEritrea\nES\t\"El Salvador\"\nET\tEthiopia\nEU\t\"Europa Island\"\nEZ\t\"Czech Republic\"\nFG\t\"French Guiana\"\nFI\tFinland\nFJ\tFiji\nFK\t\"Falkland Islands (Islas Malvinas)\"\nFO\t\"Faroe Islands\"\nFP\t\"French Polynesia\"\nFQ\t\"Baker Island\"\nFR\tFrance\nFS\t\"French Southern and Antarctic Lands\"\nGB\tGabon\nGG\tGeorgia\nGH\tGhana\nGI\tGibraltar\nGJ\tGrenada\nGK\tGuernsey\nGL\tGreenland\nGM\tGermany\nGO\t\"Glorioso Islands\"\nGP\tGuadeloupe\nGQ\tGuam\nGR\tGreece\nGT\tGuatemala\nGV\tGuinea\nGY\tGuyana\nGZ\t\"Gaza Strip\"\nHA\tHaiti\nHK\t\"Hong Kong\"\nHM\t\"Heard Island and McDonald Islands\"\nHO\tHonduras\nHQ\t\"Howland Island\"\nHR\tCroatia\nHU\tHungary\nIC\tIceland\nID\tIndonesia\nIM\tIsle of Man\nIN\tIndia\nIO\t\"British Indian Ocean Territory\"\nIP\t\"Clipperton Island\"\nIR\tIran\nIS\tIsrael\nIT\tItaly\nIV\t\"Cote d'Ivoire\"\nIZ\tIraq\nJA\tJapan\nJE\tJersey\nJM\tJamaica\nJN\t\"Jan Mayen\"\nJO\tJordan\nJQ\t\"Johnston Atoll\"\nJU\t\"Juan de Nova Island\"\nKE\tKenya\nKG\tKyrgyzstan\nKQ\t\"Kingman Reef\"\nKR\tKiribati\nKT\t\"Christmas Island\"\nKU\tKuwait\nKV\tKosovo\nKZ\tKazakhstan\nLA\tLaos\nLE\tLebanon\nLG\tLatvia\nLH\tLithuania\nLI\tLiberia\nLO\tSlovakia\nLQ\t\"Palmyra Atoll\"\nLS\tLiechtenstein\nLT\tLesotho\nLU\tLuxembourg\nLY\tLibya\nMA\tMadagascar\nMB\tMartinique\nMC\tMacau\nMD\tMoldova\nMF\tMayotte\nMG\tMongolia\nMH\tMontserrat\nMI\tMalawi\nMJ\tMontenegro\nMK\tMacedonia\nML\tMali\nMN\tMonaco\nMO\tMorocco\nMP\tMauritius\nMQ\t\"Midway Islands\"\nMR\tMauritania\nMT\tMalta\nMU\tOman\nMV\tMaldives\nMX\tMexico\nMY\tMalaysia\nMZ\tMozambique\nNC\t\"New Caledonia\"\nNE\tNiue\nNF\t\"Norfolk Island\"\nNG\tNiger\nNH\tVanuatu\nNI\tNigeria\nNL\tNetherlands\nNN\tSint Maarten\nNO\tNorway\nNP\tNepal\nNR\tNauru\nNS\tSuriname\nNU\tNicaragua\nNZ\t\"New Zealand\"\nOD\tSouth Sudan\nPA\tParaguay\nPC\t\"Pitcairn Islands\"\nPE\tPeru\nPF\t\"Paracel Islands\"\nPG\t\"Spratly Islands\"\nPK\tPakistan\nPL\tPoland\nPM\tPanama\nPO\tPortugal\nPP\t\"Papua New Guinea\"\nPS\tPalau\nPU\tGuinea-Bissau\nQA\tQatar\nRE\tReunion\nRI\tSerbia\nRM\t\"Marshall Islands\"\nRN\tSaint Martin\nRO\tRomania\nRP\tPhilippines\nRQ\t\"Puerto Rico\"\nRS\tRussia\nRW\tRwanda\nSA\t\"Saudi Arabia\"\nSB\t\"Saint Pierre and Miquelon\"\nSC\t\"Saint Kitts and Nevis\"\nSE\tSeychelles\nSF\t\"South Africa\"\nSG\tSenegal\nSH\t\"Saint Helena\"\nSI\tSlovenia\nSL\t\"Sierra Leone\"\nSM\t\"San Marino\"\nSN\tSingapore\nSO\tSomalia\nSP\tSpain\nST\t\"Saint Lucia\"\nSU\tSudan\nSV\tSvalbard\nSW\tSweden\nSX\t\"South Georgia and the Islands\"\nSY\tSyria\nSZ\tSwitzerland\nTB\tSaint Barthelemy\nTD\t\"Trinidad and Tobago\"\nTE\t\"Tromelin Island\"\nTH\tThailand\nTI\tTajikistan\nTK\t\"Turks and Caicos Islands\"\nTL\tTokelau\nTN\tTonga\nTO\tTogo\nTP\t\"Sao Tome and Principe\"\nTS\tTunisia\nTT\tTimor-Leste\nTU\tTurkey\nTV\tTuvalu\nTW\tTaiwan\nTX\tTurkmenistan\nTZ\tTanzania\nUC\tCuracao\nUG\tUganda\nUK\t\"United Kingdom\"\nUP\tUkraine\nUS\t\"United States\"\nUV\t\"Burkina Faso\"\nUY\tUruguay\nUZ\tUzbekistan\nVC\t\"Saint Vincent and the Grenadines\"\nVE\tVenezuela\nVM\tVietnam\nVT\tVatican City\nWA\tNamibia\nWE\t\"West Bank\"\nWF\t\"Wallis and Futuna\"\nWI\t\"Western Sahara\"\nWQ\t\"Wake Island\"\nWS\tSamoa\nWZ\tSwaziland\nYM\tYemen\nZA\tZambia\nZI\tZimbabwe"
     }
    ]
   },
   "apps": [],
   "jobName": "paragraph_1579530701627_-667929997",
   "id": "20200120-143141_1464816687",
   "dateCreated": "2020-01-20T14:31:41+0000",
   "dateStarted": "2020-01-20T14:31:55+0000",
   "dateFinished": "2020-01-20T14:32:54+0000",
   "status": "FINISHED",
   "progressUpdateIntervalMs": 500.0
  },
  {
   "text": "%spark\n\nvar countryToPositiveAndNegativeArticlesMap = collection.mutable.Map[String, Tuple3[Int, Int, String]]()\n\nfor (row <- dfAllCountries.collect) {\n    countryToPositiveAndNegativeArticlesMap += (row.getString(0) -> Tuple3(0, 0, \"\"))\n}\n\nval columnNamesCountryToneForCountryIdAndDateWithCountryName = Seq(\"id\", \"related_month\", \"start_date\", \"end_date\", \"articles_number\", \"mood\",\n    \"last_published_date\", \"country_id\", \"load_date\", \"name\")\n\ncountryToPositiveAndNegativeArticlesMap.foreach(x => {\n    // find country_tone for this country for this month\n    var countryId = x._1\n    val sqlQueryForCountryToneGivenCountryIdAndCurrentMonth =\n        f\"\"\"(SELECT * FROM(SELECT ct.id, ct.related_month, ct.start_date, ct.end_date, ct.articles_number, \n            ct.mood, ct.last_published_date, ct.country_id, ct.load_date, c.name FROM country_tone ct\n              JOIN country c on c.id = ct.country_id\n              WHERE country_id = '$countryId'\n              AND YEAR(related_month) = YEAR(now())\n              AND MONTH(related_month) = MONTH(now())\n              ) joined_country_tone_for_countryid_and_date) AS country_tone_for_countryid_and_date \"\"\"\n    val dfCountryToneForCountryIdAndCurrentMonth = getDataFrame(sqlQueryForCountryToneGivenCountryIdAndCurrentMonth, columnNamesCountryToneForCountryIdAndDateWithCountryName)\n\n    for (row <- dfCountryToneForCountryIdAndCurrentMonth.collect) {\n        val mood = row.getString(5)\n        val articleCount = row.getInt(4)\n        val name = row.getString(9)\n\n        if (mood == \"positive\") {\n            countryToPositiveAndNegativeArticlesMap.update((x._1), Tuple3(countryToPositiveAndNegativeArticlesMap(x._1)._1 + articleCount,\n                countryToPositiveAndNegativeArticlesMap(x._1)._2, name))\n        } else {\n            countryToPositiveAndNegativeArticlesMap.update((x._1), Tuple3(countryToPositiveAndNegativeArticlesMap(x._1)._1,\n                countryToPositiveAndNegativeArticlesMap(x._1)._2 + articleCount, name))\n        }\n    }\n})\n\n\n",
   "user": "anonymous",
   "dateUpdated": "2020-01-20T14:32:52+0000",
   "config": {},
   "settings": {
    "params": {},
    "forms": {}
   },
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "\ncountryToPositiveAndNegativeArticlesMap: scala.collection.mutable.Map[String,(Int, Int, String)] = Map()\n\ncolumnNamesCountryToneForCountryIdAndDateWithCountryName: Seq[String] = List(id, related_month, start_date, end_date, articles_number, mood, last_published_date, country_id, load_date, name)\n"
     }
    ]
   },
   "apps": [],
   "jobName": "paragraph_1579530701656_-680626711",
   "id": "20200120-143141_245634459",
   "dateCreated": "2020-01-20T14:31:41+0000",
   "dateStarted": "2020-01-20T14:32:52+0000",
   "dateFinished": "2020-01-20T14:33:19+0000",
   "status": "FINISHED",
   "progressUpdateIntervalMs": 500.0
  },
  {
   "text": "%spark\n\nvar positiveCountriesToRatioMap = collection.mutable.Map[String, Tuple2[Double, String]]()\ncountryToPositiveAndNegativeArticlesMap.foreach(x => {\n    if (x._2._1 > x._2._2) {\n        val ratio = (1.0 + x._2._1) / (1.0 + x._2._2)\n        positiveCountriesToRatioMap += (x._1 -> Tuple2(ratio, x._2._3))\n    }\n})\n",
   "user": "anonymous",
   "dateUpdated": "2020-01-20T14:36:27+0000",
   "config": {
    "colWidth": 12.0,
    "enabled": true,
    "results": {},
    "editorSetting": {}
   },
   "settings": {
    "params": {},
    "forms": {}
   },
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "\npositiveCountriesToRatioMap: scala.collection.mutable.Map[String,(Double, String)] = Map()\n"
     }
    ]
   },
   "apps": [],
   "jobName": "paragraph_1579530973040_-1439180808",
   "id": "20200120-143613_1447060743",
   "dateCreated": "2020-01-20T14:36:13+0000",
   "dateStarted": "2020-01-20T14:36:13+0000",
   "dateFinished": "2020-01-20T14:36:14+0000",
   "status": "FINISHED",
   "progressUpdateIntervalMs": 500.0
  },
  {
   "text": "%spark\n// Krok 2.\nvar positiveCountriesToRatioEarliestDateMap = collection.mutable.Map[String, Tuple3[String, Int, java.sql.Date]]()\npositiveCountriesToRatioMap.foreach(x => {\n    positiveCountriesToRatioEarliestDateMap += (x._1 -> Tuple3(x._2._2, 0, new java.sql.Date(new java.util.Date().getTime())))\n})\n\n\npositiveCountriesToRatioMap.foreach(x => {\n    var countryId = x._1\n\n    val sqlQueryForCountryToneGivenCountryIdAndBeforeCurrentMonth =\n        f\"\"\"(SELECT * FROM(SELECT ct.id, ct.related_month, ct.start_date, ct.end_date, ct.articles_number, ct.mood, ct.last_published_date, ct.country_id, ct.load_date FROM country_tone ct\n              WHERE country_id = '$countryId'\n                AND (YEAR(related_month) <= YEAR(DATE_ADD(NOW(), INTERVAL -1 YEAR))\n                OR (YEAR(related_month) = YEAR(DATE_ADD(NOW(), INTERVAL -1 MONTH))\n                AND MONTH(related_month) <= MONTH(DATE_ADD(NOW(), INTERVAL -1 MONTH))))\n              ) joined_country_tone_for_countryid_and_date) AS country_tone_for_countryid_and_date \"\"\"\n    //                AND (YEAR(related_month) <= YEAR(DATE_ADD(NOW(), INTERVAL -1 YEAR))\n    //                OR (YEAR(related_month) = YEAR(DATE_ADD(NOW(), INTERVAL -1 MONTH))\n    //                AND MONTH(related_month) <= MONTH(DATE_ADD(NOW(), INTERVAL -1 MONTH))))\n\n    val dfCountryToneForCountryIdAndBeforeCurrentMonth = getDataFrame(sqlQueryForCountryToneGivenCountryIdAndBeforeCurrentMonth,\n        columnNamesCountryToneForCountryIdAndDate).orderBy(desc(\"start_date\")).orderBy(desc(\"mood\"))\n\n    var positive = true\n    for (row <- dfCountryToneForCountryIdAndBeforeCurrentMonth.collect) {\n        if (positive) {\n            val startDate = row.getDate(2)\n            val articleCount = row.getInt(4)\n            val mood = row.getString(5)\n\n            if (mood == \"positive\") {\n                positiveCountriesToRatioEarliestDateMap.update((x._1),\n                    Tuple3(positiveCountriesToRatioEarliestDateMap(x._1)._1,\n                        positiveCountriesToRatioEarliestDateMap(x._1)._2 + articleCount,\n                        startDate))\n            }\n            else {\n                positive = false\n            }\n        }\n    }\n})\n\nval resultList = positiveCountriesToRatioEarliestDateMap.values.toList\nval resultDataframe = resultList.toDF(\"country\", \"articles_number\", \"start_date\")\n\nprintQueryResultsAsTable(resultDataframe)\n",
   "user": "anonymous",
   "dateUpdated": "2020-01-20T14:56:03+0000",
   "config": {
    "colWidth": 12.0,
    "enabled": true,
    "results": {},
    "editorSetting": {}
   },
   "settings": {
    "params": {},
    "forms": {}
   },
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "\npositiveCountriesToRatioEarliestDateMap: scala.collection.mutable.Map[String,(String, Int, java.sql.Date)] = Map()\n\nresultList: List[(String, Int, java.sql.Date)] = List((Philippines,2,2019-12-19), (China,5,2019-12-19), (Macau,0,2020-01-20), (Ireland,1,2019-12-19), (Indonesia,0,2020-01-20), (Namibia,0,2020-01-20), (Venezuela,0,2020-01-20), (Gibraltar,0,2020-01-20), (Pakistan,1,2019-12-19), (Peru,0,2020-01-20), (Austria,0,2020-01-20), (Syria,0,2020-01-20), (Vietnam,1,2019-12-19), (Canada,0,2020-01-20), (\"United Kingdom\",2,2019-12-19), (Chile,0,2020-01-20), (Mauritius,0,2020-01-20), (Taiwan,0,2020-01-20), (\"United States\",23,2019-12-19), (Netherlands,0,2020-01-20))\n\nresultDataframe: org.apache.spark.sql.DataFrame = [country: string, articles_number: int ... 1 more field]\n"
     },
     {
      "type": "TABLE",
      "data": "country\tarticles_number\tstart_date\nPhilippines\t2\t2019-12-19\nChina\t5\t2019-12-19\nMacau\t0\t2020-01-20\nIreland\t1\t2019-12-19\nIndonesia\t0\t2020-01-20\nNamibia\t0\t2020-01-20\nVenezuela\t0\t2020-01-20\nGibraltar\t0\t2020-01-20\nPakistan\t1\t2019-12-19\nPeru\t0\t2020-01-20\nAustria\t0\t2020-01-20\nSyria\t0\t2020-01-20\nVietnam\t1\t2019-12-19\nCanada\t0\t2020-01-20\n\"United Kingdom\"\t2\t2019-12-19\nChile\t0\t2020-01-20\nMauritius\t0\t2020-01-20\nTaiwan\t0\t2020-01-20\n\"United States\"\t23\t2019-12-19\nNetherlands\t0\t2020-01-20"
     }
    ]
   },
   "apps": [],
   "jobName": "paragraph_1579532151258_2107749260",
   "id": "20200120-145551_1278816644",
   "dateCreated": "2020-01-20T14:55:51+0000",
   "dateStarted": "2020-01-20T14:55:51+0000",
   "dateFinished": "2020-01-20T14:56:01+0000",
   "status": "FINISHED",
   "progressUpdateIntervalMs": 500.0
  }
 ],
 "name": "Zeppelin Notebook",
 "id": "",
 "noteParams": {},
 "noteForms": {},
 "angularObjects": {},
 "config": {
  "isZeppelinNotebookCronEnable": false,
  "looknfeel": "default",
  "personalizedMode": "false"
 },
 "info": {}
}