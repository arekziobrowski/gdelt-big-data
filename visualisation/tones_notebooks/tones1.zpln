{
 "paragraphs": [
  {
   "text": "%dep\n\n\n\nz.reset()\nz.load(\"/zeppelin/local-repo/mysql-connector-java-5.1.6.jar\")",
   "user": "anonymous",
   "dateUpdated": "2020-01-20T00:16:28+0000",
   "config": {
    "editorSetting": {
     "language": "scala",
     "editOnDblClick": false,
     "completionKey": "TAB",
     "completionSupport": true
    },
    "colWidth": 12.0,
    "editorMode": "ace/mode/scala",
    "fontSize": 9.0,
    "results": {},
    "enabled": true
   },
   "settings": {
    "params": {},
    "forms": {}
   },
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "res0: org.apache.zeppelin.dep.Dependency = org.apache.zeppelin.dep.Dependency@58c9a418\n"
     }
    ]
   },
   "apps": [],
   "jobName": "paragraph_1579479387985_-1658796185",
   "id": "20200120-001627_481481618",
   "dateCreated": "2020-01-20T00:16:27+0000",
   "dateStarted": "2020-01-20T00:16:28+0000",
   "dateFinished": "2020-01-20T00:16:40+0000",
   "status": "FINISHED",
   "progressUpdateIntervalMs": 500.0
  },
  {
   "text": "%spark\nimport org.apache.spark.sql._\n\ndef printQueryResultsAsTable(dataFrame: DataFrame): Unit = {\n    print(\"%table\\n\" + dataFrame.columns.mkString(\"\\t\") + '\\n' + dataFrame.map(x => x.mkString(\"\\t\")).collect().mkString(\"\\n\"))\n}\n\ndef getDataFrame(query: String, columnNames: Seq[String]): DataFrame = {\n    //    print(query)\n    val df = sqlContext.read.format(\"jdbc\").option(\"driver\", \"com.mysql.jdbc.Driver\")\n            .option(\"url\", \"jdbc:mysql://maria-gdelt:3306/bd_gdelt\")\n            .option(\"databaseName\", \"bd_gdelt\")\n            .option(\"user\", \"root\")\n            .option(\"password\", \"root\")\n            .option(\"dbtable\", query)\n            .load()\n            .toDF(columnNames: _*)\n    return df\n}\n",
   "user": "anonymous",
   "dateUpdated": "2020-01-20T00:16:44+0000",
   "config": {},
   "settings": {
    "params": {
     "Date published >=": "",
     "Country name LIKE": "",
     "bdtMeta": {
      "inlay": {
       "state": {
        "currentPage": "Console",
        "chart": {
         "series": [
          {
           "type": "Line",
           "x": {
            "column": "Date published",
            "index": 0.0
           },
           "y": {
            "column": "Tone",
            "index": 2.0
           }
          }
         ]
        }
       }
      }
     }
    },
    "forms": {}
   },
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "\nimport org.apache.spark.sql._\n\nprintQueryResultsAsTable: (dataFrame: org.apache.spark.sql.DataFrame)Unit\n\ngetDataFrame: (query: String, columnNames: Seq[String])org.apache.spark.sql.DataFrame\n"
     }
    ]
   },
   "apps": [],
   "jobName": "paragraph_1579479404283_-546255608",
   "id": "20200120-001644_1216641717",
   "dateCreated": "2020-01-20T00:16:44+0000",
   "dateStarted": "2020-01-20T00:16:44+0000",
   "dateFinished": "2020-01-20T00:17:06+0000",
   "status": "FINISHED",
   "progressUpdateIntervalMs": 500.0
  },
  {
   "text": "%spark\n\nval sqlQueryArticle =\n    \"\"\"(SELECT * FROM (SELECT a.date_published, a.date_event, a.tone, a.country_id, c.name FROM article a\n                            JOIN country c on c.id = a.country_id \n                            ORDER BY a.date_published ASC) tones_prep ${0} ) AS tones\"\"\"\n\nval columnNamesArticle = Seq(\"Date published\", \"Date event\", \"Tone\", \"Country ID\", \"Country name\")\n\nval articleDatePublished = z.input(\"Date published >=\")\nval countryName = z.input(\"Country name LIKE\")\n\nvar conditionsArticle = List[String]()\nif (articleDatePublished != \"\") {\n    conditionsArticle = (\"date_published >= '\" + articleDatePublished + \"'\") :: conditionsArticle\n}\nif (countryName != \"\") {\n    conditionsArticle = (\"name LIKE '%\" + countryName + \"%'\") :: conditionsArticle\n}\n\nval condJoinedArticle = (if (conditionsArticle.isEmpty) \"\" else \"WHERE \") + conditionsArticle.mkString(\" AND \")\nval dfArticle = getDataFrame(sqlQueryArticle.replace(\"${0}\", condJoinedArticle), columnNamesArticle)\nprintQueryResultsAsTable(dfArticle)\n\n\n",
   "user": "anonymous",
   "dateUpdated": "2020-01-20T00:17:12+0000",
   "config": {},
   "settings": {
    "params": {
     "Date published >=": "",
     "Country name LIKE": ""
    },
    "forms": {
     "Date published >=": {
      "name": "Date published >=",
      "displayName": "Date published >=",
      "type": "input",
      "defaultValue": "",
      "hidden": false
     },
     "Country name LIKE": {
      "name": "Country name LIKE",
      "displayName": "Country name LIKE",
      "type": "input",
      "defaultValue": "",
      "hidden": false
     }
    }
   },
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "\n\n\n\nsqlQueryArticle: String =\n(SELECT * FROM (SELECT a.date_published, a.date_event, a.tone, a.country_id, c.name FROM article a\n                            JOIN country c on c.id = a.country_id\n                            ORDER BY a.date_published ASC) tones_prep ${0} ) AS tones\n\ncolumnNamesArticle: Seq[String] = List(Date published, Date event, Tone, Country ID, Country name)\n\narticleDatePublished: Object = \"\"\n\ncountryName: Object = \"\"\n\nconditionsArticle: List[String] = List()\n\ncondJoinedArticle: String = \"\"\n\ndfArticle: org.apache.spark.sql.DataFrame = [Date published: date, Date event: date ... 3 more fields]\n"
     },
     {
      "type": "TABLE",
      "data": "Date published\tDate event\tTone\tCountry ID\tCountry name\n2020-01-06\t2020-01-06\t-6.24821\tIR\tIran\n2020-01-06\t2020-01-06\t0.85679\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t2.76243\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t2.92683\tIN\tIndia\n2020-01-06\t2020-01-06\t6.84932\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t-6.77966\tPK\tPakistan\n2020-01-06\t2020-01-06\t-6.37312\tFR\tFrance\n2020-01-06\t2020-01-06\t2.24138\tCH\tChina\n2020-01-06\t2020-01-06\t-6.71892\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t-10.53812\tUK\t\"United Kingdom\"\n2020-01-06\t2020-01-06\t-4.70383\tIN\tIndia\n2020-01-06\t2020-01-06\t-2.22445\tPK\tPakistan\n2020-01-06\t2020-01-06\t0.00000\tBD\tBermuda\n2020-01-06\t2020-01-06\t-1.55763\tHK\t\"Hong Kong\"\n2020-01-06\t2020-01-06\t-5.47945\tLY\tLibya\n2020-01-06\t2020-01-06\t1.62791\tAS\tAustralia\n2020-01-06\t2020-01-06\t-5.93220\tIZ\tIraq\n2020-01-06\t2020-01-06\t-4.04624\tSN\tSingapore\n2020-01-06\t2020-01-06\t-5.93750\tFR\tFrance\n2020-01-06\t2020-01-06\t2.96736\tAC\t\"Antigua and Barbuda\"\n2020-01-06\t2020-01-06\t10.25641\tSN\tSingapore\n2020-01-06\t2020-01-06\t-1.35266\tCH\tChina\n2020-01-06\t2020-01-06\t-5.95223\tLE\tLebanon\n2020-01-06\t2020-01-06\t-5.43735\tIR\tIran\n2020-01-06\t2020-01-06\t-2.90179\tGM\tGermany\n2020-01-06\t2020-01-06\t-13.01370\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t3.89610\tCH\tChina\n2020-01-06\t2020-01-06\t-1.01010\tUK\t\"United Kingdom\"\n2020-01-06\t2020-01-06\t-4.88599\tBO\tBelarus\n2020-01-06\t2020-01-06\t-5.17799\tKU\tKuwait\n2020-01-06\t2020-01-06\t0.43478\tNO\tNorway\n2020-01-06\t2020-01-06\t3.42105\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t-3.62595\tAS\tAustralia\n2020-01-06\t2020-01-06\t-2.66990\tUP\tUkraine\n2020-01-06\t2020-01-06\t-6.30137\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t4.16667\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t4.45205\tCH\tChina\n2020-01-06\t2020-01-06\t3.54839\tAS\tAustralia\n2020-01-06\t2020-01-06\t2.13746\tEN\tEstonia\n2020-01-06\t2020-01-06\t3.18725\tSN\tSingapore\n2020-01-06\t2020-01-06\t-5.59006\tIR\tIran\n2020-01-06\t2020-01-06\t-5.22621\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t-3.88060\tBR\tBrazil\n2020-01-06\t2020-01-06\t0.00000\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t1.78838\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t-3.13550\tFR\tFrance\n2020-01-06\t2020-01-06\t2.07852\tRP\tPhilippines\n2020-01-06\t2020-01-06\t-2.04778\tAS\tAustralia\n2020-01-06\t2020-01-06\t-5.05618\tJA\tJapan\n2020-01-06\t2020-01-06\t0.91743\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t-2.85714\tIR\tIran\n2020-01-06\t2020-01-06\t-3.25203\tIR\tIran\n2020-01-06\t2020-01-06\t-1.49477\tCA\tCanada\n2020-01-06\t2020-01-06\t-1.47992\tCH\tChina\n2020-01-06\t2020-01-06\t6.74157\tEI\tIreland\n2020-01-06\t2020-01-06\t3.33333\tTH\tThailand\n2020-01-06\t2020-01-06\t-0.25907\tCA\tCanada\n2020-01-06\t2020-01-06\t7.95892\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t-8.64745\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t-6.18102\tUK\t\"United Kingdom\"\n2020-01-06\t2020-01-06\t-6.52463\tIN\tIndia\n2020-01-06\t2019-12-30\t3.60360\tUS\t\"United States\"\n2020-01-06\t2019-12-07\t-8.27586\tIN\tIndia\n2020-01-06\t2020-01-06\t-6.25000\tVM\tVietnam\n2020-01-06\t2020-01-06\t-8.99743\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t-4.47248\tHK\t\"Hong Kong\"\n2020-01-06\t2020-01-06\t-2.15633\tIR\tIran\n2020-01-06\t2020-01-06\t-5.76923\tSO\tSomalia\n2020-01-06\t2020-01-06\t-0.37594\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t2.41010\tHA\tHaiti\n2020-01-06\t2020-01-06\t-5.27704\tIR\tIran\n2020-01-06\t2020-01-06\t-0.59809\tFR\tFrance\n2020-01-06\t2020-01-06\t-21.05263\tVE\tVenezuela\n2020-01-06\t2020-01-06\t-3.31675\tIN\tIndia\n2020-01-06\t2020-01-06\t-2.00000\tAS\tAustralia\n2020-01-06\t2020-01-06\t4.62963\tMX\tMexico\n2020-01-06\t2020-01-06\t-6.88172\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t-5.03686\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t-8.87097\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t-4.49640\tIR\tIran\n2020-01-06\t2020-01-06\t-11.76471\tIR\tIran\n2020-01-06\t2020-01-06\t3.21199\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t-0.90293\tIZ\tIraq\n2020-01-06\t2020-01-06\t-6.03217\tIR\tIran\n2020-01-06\t2019-12-30\t-2.82609\tUK\t\"United Kingdom\"\n2020-01-06\t2020-01-06\t-3.50000\tIN\tIndia\n2020-01-06\t2020-01-06\t0.12739\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t-3.48189\tIR\tIran\n2020-01-06\t2020-01-06\t-3.08370\tAS\tAustralia\n2020-01-06\t2020-01-06\t3.65059\tRP\tPhilippines\n2020-01-06\t2020-01-06\t-5.79268\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t-4.91284\tIR\tIran\n2020-01-06\t2020-01-06\t3.78251\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t4.01235\tVM\tVietnam\n2020-01-06\t2020-01-06\t-1.04781\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t0.79051\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t3.86905\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t-4.01530\tIS\tIsrael\n2020-01-06\t2020-01-06\t-5.95855\tIR\tIran\n2020-01-06\t2020-01-06\t-2.30516\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t-4.93827\tIZ\tIraq\n2020-01-06\t2020-01-06\t-2.64423\tIZ\tIraq\n2020-01-06\t2020-01-06\t-7.66234\tAF\tAfghanistan\n2020-01-06\t2020-01-06\t-2.34114\tAS\tAustralia\n2020-01-06\t2020-01-06\t-4.74934\tAS\tAustralia\n2020-01-06\t2020-01-06\t-7.26469\tSY\tSyria\n2020-01-06\t2020-01-06\t-3.07882\tAS\tAustralia\n2020-01-06\t2020-01-06\t-5.60000\tIR\tIran\n2020-01-06\t2020-01-06\t-4.46927\tIS\tIsrael\n2020-01-06\t2020-01-06\t-7.82313\tIZ\tIraq\n2020-01-06\t2020-01-06\t-8.27680\tIR\tIran\n2020-01-06\t2020-01-06\t2.55102\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t-4.07451\tVE\tVenezuela\n2020-01-06\t2020-01-06\t-3.37838\tQA\tQatar\n2020-01-06\t2020-01-06\t7.31707\tAS\tAustralia\n2020-01-06\t2020-01-06\t-4.14013\tRP\tPhilippines\n2020-01-06\t2020-01-06\t0.34483\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t-1.53846\tGM\tGermany\n2020-01-06\t2020-01-06\t1.62075\tCH\tChina\n2020-01-06\t2020-01-06\t-3.66972\tIR\tIran\n2020-01-06\t2020-01-06\t-5.98923\tIR\tIran\n2020-01-06\t2020-01-06\t0.97087\tUK\t\"United Kingdom\"\n2020-01-06\t2020-01-06\t0.68571\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t-5.88235\tIN\tIndia\n2020-01-06\t2020-01-06\t2.52525\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t-0.33784\tPK\tPakistan\n2020-01-06\t2020-01-06\t4.84211\tPK\tPakistan\n2020-01-06\t2020-01-06\t-8.14111\tIR\tIran\n2020-01-06\t2020-01-06\t2.57143\tJA\tJapan\n2020-01-06\t2020-01-06\t7.78071\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t1.91693\tHK\t\"Hong Kong\"\n2020-01-06\t2020-01-06\t7.09951\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t-2.88462\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t9.94152\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t0.94877\tUK\t\"United Kingdom\"\n2020-01-06\t2020-01-06\t1.79283\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t-9.42029\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t-3.32326\tIZ\tIraq\n2020-01-06\t2020-01-06\t0.00000\tSN\tSingapore\n2020-01-06\t2019-12-30\t-5.33708\tIR\tIran\n2020-01-06\t2020-01-06\t-0.28490\tUS\t\"United States\"\n2020-01-06\t2019-12-30\t2.20994\tCH\tChina\n2020-01-06\t2020-01-06\t2.76923\tMX\tMexico\n2020-01-06\t2020-01-06\t-8.07692\tAS\tAustralia\n2020-01-06\t2020-01-06\t-3.40000\tAE\t\"United Arab Emirates\"\n2020-01-06\t2020-01-06\t-0.50167\tUK\t\"United Kingdom\"\n2020-01-06\t2020-01-06\t-3.89105\tIZ\tIraq\n2020-01-06\t2020-01-06\t-0.50505\tTW\tTaiwan\n2020-01-06\t2020-01-06\t-3.04183\tFR\tFrance\n2020-01-06\t2020-01-06\t-2.01342\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t-1.85811\tIR\tIran\n2020-01-06\t2020-01-06\t-6.04027\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t-9.59596\tIR\tIran\n2020-01-06\t2020-01-06\t-2.36686\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t-6.32530\tUS\t\"United States\"\n2020-01-06\t2020-01-06\t-7.19823\tAS\tAustralia\n2020-01-06\t2020-01-06\t-4.00729\tYM\tYemen\n2020-01-06\t2020-01-06\t2.32020\tJA\tJapan\n2020-01-08\t2020-01-08\t-5.80110\tUK\t\"United Kingdom\"\n2020-01-08\t2020-01-08\t-0.54645\tEN\tEstonia\n2020-01-08\t2020-01-08\t-2.48566\tEG\tEgypt\n2020-01-08\t2020-01-08\t-1.40351\tAS\tAustralia\n2020-01-08\t2020-01-08\t-3.04487\tUS\t\"United States\"\n2020-01-08\t2020-01-08\t8.89621\tRP\tPhilippines\n2020-01-08\t2020-01-08\t1.24481\tUS\t\"United States\"\n2020-01-08\t2020-01-08\t0.23077\tUS\t\"United States\"\n2020-01-08\t2020-01-08\t3.01508\tUS\t\"United States\"\n2020-01-08\t2020-01-08\t-7.69231\tIZ\tIraq\n2020-01-08\t2020-01-01\t-4.09836\tSN\tSingapore\n2020-01-08\t2020-01-08\t-6.39731\tUS\t\"United States\"\n2020-01-08\t2020-01-08\t1.94715\tAU\tAustria\n2020-01-08\t2020-01-08\t-3.44569\tIZ\tIraq\n2020-01-08\t2020-01-08\t3.47722\tJA\tJapan\n2020-01-08\t2020-01-08\t-7.37327\tIS\tIsrael\n2020-01-08\t2020-01-08\t-6.34058\tJA\tJapan\n2020-01-08\t2020-01-08\t-7.28597\tCY\tCyprus\n2020-01-08\t2020-01-08\t1.05263\tVM\tVietnam\n2020-01-08\t2020-01-08\t0.00000\tMP\tMauritius\n2020-01-08\t2020-01-08\t3.79747\tCA\tCanada\n2020-01-17\t2020-01-17\t0.00000\tWA\tNamibia\n2020-01-17\t2020-01-17\t1.75439\tUK\t\"United Kingdom\"\n2020-01-17\t2020-01-17\t-2.98507\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-3.98860\tUP\tUkraine\n2020-01-17\t2020-01-17\t2.04461\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t3.47349\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-5.98007\tAS\tAustralia\n2020-01-17\t2020-01-17\t-2.00861\tGM\tGermany\n2020-01-17\t2020-01-17\t-4.86891\tIR\tIran\n2020-01-17\t2020-01-17\t-1.14566\tMX\tMexico\n2020-01-17\t2020-01-17\t-3.59897\tIN\tIndia\n2020-01-17\t2020-01-17\t-5.90112\tIR\tIran\n2020-01-17\t2020-01-17\t-3.52941\tHK\t\"Hong Kong\"\n2020-01-17\t2020-01-17\t-5.96591\tSN\tSingapore\n2020-01-17\t2020-01-17\t6.47182\tCH\tChina\n2020-01-17\t2020-01-17\t2.76873\tNL\tNetherlands\n2020-01-17\t2020-01-17\t1.35468\tMY\tMalaysia\n2020-01-17\t2020-01-17\t-4.08163\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-4.61255\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-3.11284\tIR\tIran\n2020-01-17\t2020-01-17\t0.43573\tCH\tChina\n2020-01-17\t2020-01-17\t-4.58971\tUK\t\"United Kingdom\"\n2020-01-17\t2020-01-17\t0.10905\tCH\tChina\n2020-01-17\t2020-01-17\t1.96721\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t3.19549\tFR\tFrance\n2020-01-17\t2020-01-17\t-0.16892\tUP\tUkraine\n2020-01-17\t2020-01-17\t-9.67742\tRP\tPhilippines\n2020-01-17\t2020-01-17\t0.00000\tPK\tPakistan\n2020-01-17\t2020-01-17\t-4.02145\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-5.25547\tAS\tAustralia\n2020-01-17\t2020-01-17\t0.91743\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-4.60705\tIR\tIran\n2020-01-17\t2020-01-17\t-3.57143\tSP\tSpain\n2020-01-17\t2020-01-17\t-0.63091\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-0.74906\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-7.34463\tIR\tIran\n2020-01-17\t2020-01-17\t-4.14201\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-5.09259\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t5.33817\tSN\tSingapore\n2020-01-17\t2020-01-17\t-1.89781\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t1.56556\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t0.65646\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-5.01567\tUK\t\"United Kingdom\"\n2020-01-17\t2020-01-17\t-4.39122\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-1.05263\tEG\tEgypt\n2020-01-17\t2020-01-10\t-3.07692\tIT\tItaly\n2020-01-17\t2020-01-17\t-5.88235\tCY\tCyprus\n2020-01-17\t2020-01-17\t2.77778\tCI\tChile\n2020-01-17\t2020-01-17\t-6.01852\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-2.88462\tNZ\t\"New Zealand\"\n2020-01-17\t2020-01-17\t-1.61565\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-0.48309\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t5.91133\tSZ\tSwitzerland\n2020-01-17\t2020-01-17\t-4.31211\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t3.89262\tID\tIndonesia\n2020-01-17\t2020-01-17\t-1.29241\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-8.91304\tBE\tBelgium\n2020-01-17\t2020-01-17\t-6.33245\tMY\tMalaysia\n2020-01-17\t2020-01-17\t-0.81136\tGM\tGermany\n2020-01-17\t2020-01-17\t-5.39130\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-2.72480\tIZ\tIraq\n2020-01-17\t2020-01-17\t-5.50847\tAS\tAustralia\n2020-01-17\t2020-01-17\t-1.41458\tFR\tFrance\n2020-01-17\t2020-01-17\t-2.69360\tRP\tPhilippines\n2020-01-17\t2020-01-17\t-5.71031\tIR\tIran\n2020-01-17\t2020-01-17\t-5.67164\tAS\tAustralia\n2020-01-17\t2020-01-17\t-7.39958\tIR\tIran\n2020-01-17\t2020-01-17\t0.00000\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t0.00000\tSY\tSyria\n2020-01-17\t2020-01-17\t0.00000\tUP\tUkraine\n2020-01-17\t2020-01-17\t-5.58583\tIR\tIran\n2020-01-17\t2020-01-17\t-6.25000\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t0.50420\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-0.53763\tBE\tBelgium\n2020-01-17\t2020-01-17\t2.84091\tJA\tJapan\n2020-01-17\t2020-01-17\t0.40420\tPE\tPeru\n2020-01-17\t2020-01-17\t3.04428\tGI\tGibraltar\n2020-01-17\t2020-01-17\t0.79576\tVE\tVenezuela\n2020-01-17\t2020-01-17\t3.76344\tIN\tIndia\n2020-01-17\t2020-01-17\t-1.73516\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-2.88066\tIR\tIran\n2020-01-17\t2020-01-17\t-2.57568\tLY\tLibya\n2020-01-17\t2020-01-17\t-1.23239\tSN\tSingapore\n2020-01-17\t2020-01-17\t4.19287\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-2.99145\tCH\tChina\n2020-01-17\t2020-01-17\t1.50565\tMC\tMacau\n2020-01-17\t2020-01-17\t-1.99387\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-4.88385\tLY\tLibya\n2020-01-17\t2020-01-17\t-3.21533\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-1.41844\tRS\tRussia\n2020-01-17\t2020-01-17\t-4.84848\tAO\tAngola\n2020-01-17\t2020-01-17\t-5.21739\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-4.55598\tIN\tIndia\n2020-01-17\t2020-01-17\t-6.33284\tBK\t\"Bosnia and Herzegovina\"\n2020-01-17\t2020-01-17\t-1.81818\tIZ\tIraq\n2020-01-17\t2020-01-17\t-4.76190\tIR\tIran\n2020-01-17\t2020-01-17\t6.17284\tUK\t\"United Kingdom\"\n2020-01-17\t2020-01-17\t2.45536\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-4.43350\tIN\tIndia\n2020-01-17\t2020-01-17\t-2.41112\tAJ\tAzerbaijan\n2020-01-17\t2020-01-17\t-0.91185\tJA\tJapan\n2020-01-17\t2020-01-17\t1.99780\tTW\tTaiwan\n2020-01-17\t2020-01-17\t-1.34907\tSG\tSenegal\n2020-01-17\t2020-01-17\t-1.38889\tRP\tPhilippines\n2020-01-17\t2020-01-17\t0.38168\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-5.74713\tSZ\tSwitzerland\n2020-01-17\t2020-01-17\t-3.14961\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t0.92807\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-4.44444\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-4.72028\tEG\tEgypt\n2020-01-17\t2020-01-17\t1.14286\tRS\tRussia\n2020-01-17\t2020-01-17\t0.62893\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-3.38983\tUK\t\"United Kingdom\"\n2020-01-17\t2020-01-17\t2.43506\tCH\tChina\n2020-01-17\t2020-01-17\t-4.55105\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t0.00000\tCH\tChina\n2020-01-17\t2020-01-17\t-2.97872\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t0.85379\tFR\tFrance\n2020-01-17\t2020-01-17\t-13.33333\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-7.40157\tIR\tIran\n2020-01-17\t2020-01-17\t-2.38908\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-1.69133\tCH\tChina\n2020-01-17\t2020-01-17\t-3.61991\tTH\tThailand\n2020-01-17\t2020-01-17\t0.80160\tUK\t\"United Kingdom\"\n2020-01-17\t2020-01-17\t-3.33333\tIR\tIran\n2020-01-17\t2020-01-17\t-2.33813\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-0.70755\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-4.23880\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t3.26279\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-3.91566\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-1.57480\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t1.71920\tCH\tChina\n2020-01-17\t2020-01-17\t4.74517\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t1.11607\tIT\tItaly\n2020-01-17\t2020-01-17\t-0.27548\tRS\tRussia\n2020-01-17\t2020-01-17\t1.89329\tCH\tChina\n2020-01-17\t2020-01-17\t-8.65801\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-5.06667\tBG\tBangladesh\n2020-01-17\t2020-01-17\t-0.81191\tIR\tIran\n2020-01-17\t2020-01-17\t-1.92308\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-3.75701\tIN\tIndia\n2020-01-17\t2020-01-17\t2.47543\tCA\tCanada\n2020-01-17\t2020-01-17\t3.43137\tUK\t\"United Kingdom\"\n2020-01-17\t2020-01-17\t5.09259\tMX\tMexico\n2020-01-17\t2020-01-17\t-4.65116\tBG\tBangladesh\n2020-01-17\t2020-01-17\t-0.41152\tUP\tUkraine\n2020-01-17\t2020-01-17\t-0.63091\tFR\tFrance\n2020-01-17\t2020-01-17\t-7.30337\tUP\tUkraine\n2020-01-17\t2020-01-17\t-3.65297\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-2.92398\tUS\t\"United States\"\n2020-01-17\t2019-01-17\t-3.07329\tUK\t\"United Kingdom\"\n2020-01-17\t2020-01-17\t-4.56700\tGM\tGermany\n2020-01-17\t2020-01-17\t0.26738\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t3.08008\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t-3.92157\tCA\tCanada\n2020-01-17\t2020-01-17\t0.67114\tUS\t\"United States\"\n2020-01-17\t2020-01-17\t1.43885\tEI\tIreland\n2020-01-17\t2020-01-17\t4.48718\tCH\tChina\n2020-01-17\t2020-01-17\t2.80112\tVM\tVietnam\n2020-01-17\t2020-01-17\t-1.93798\tUK\t\"United Kingdom\"\n2020-01-17\t2020-01-17\t2.50000\tUS\t\"United States\""
     }
    ]
   },
   "apps": [],
   "jobName": "paragraph_1579479432745_132472100",
   "id": "20200120-001712_651465919",
   "dateCreated": "2020-01-20T00:17:12+0000",
   "dateStarted": "2020-01-20T00:17:12+0000",
   "dateFinished": "2020-01-20T00:17:23+0000",
   "status": "FINISHED",
   "progressUpdateIntervalMs": 500.0
  },
  {
   "text": "%spark\n//class CountryTone(id: Int, related_month: Date, start_date: Date, end_date: Date, articles_number: Int, last_published_date: Date, load_date: Date, country_id: String)\n\nval sqlQueryCountryTone = \"\"\"(SELECT ct.id, ct.related_month, ct.start_date, ct.end_date, ct.articles_number, ct.mood, ct.last_published_date, ct.country_id, ct.load_date FROM country_tone ct) AS country_tones\"\"\"\nval columnNamesCountryTone = Seq(\"ID\", \"Related month\", \"Start date\", \"End date\", \"Articles number\", \"Mood\", \"Last published date\", \"Country ID\", \"Load date\")\nval dfCountryTone = getDataFrame(sqlQueryCountryTone, columnNamesCountryTone)\nprintQueryResultsAsTable(dfCountryTone)",
   "user": "anonymous",
   "dateUpdated": "2020-01-20T00:17:35+0000",
   "config": {
    "colWidth": 12.0,
    "enabled": true,
    "results": {},
    "editorSetting": {}
   },
   "settings": {
    "params": {
     "bdtMeta": {
      "inlay": {
       "state": {
        "currentPage": "Console",
        "table": {
         "visibleRow": -1.0
        }
       }
      }
     }
    },
    "forms": {}
   },
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "\nsqlQueryCountryTone: String = (SELECT ct.id, ct.related_month, ct.start_date, ct.end_date, ct.articles_number, ct.mood, ct.last_published_date, ct.country_id, ct.load_date FROM country_tone ct) AS country_tones\n\ncolumnNamesCountryTone: Seq[String] = List(ID, Related month, Start date, End date, Articles number, Mood, Last published date, Country ID, Load date)\n\ndfCountryTone: org.apache.spark.sql.DataFrame = [ID: int, Related month: date ... 7 more fields]\n"
     },
     {
      "type": "TABLE",
      "data": "ID\tRelated month\tStart date\tEnd date\tArticles number\tMood\tLast published date\tCountry ID\tLoad date\n"
     }
    ]
   },
   "apps": [],
   "jobName": "paragraph_1579479450640_1416809901",
   "id": "20200120-001730_36890611",
   "dateCreated": "2020-01-20T00:17:30+0000",
   "dateStarted": "2020-01-20T00:17:30+0000",
   "dateFinished": "2020-01-20T00:17:32+0000",
   "status": "FINISHED",
   "progressUpdateIntervalMs": 500.0
  },
  {
   "text": "%spark\nimport org.apache.spark.sql.SaveMode\nval columnNamesCountryToneForCountryIdAndDate = Seq(\"id\", \"related_month\", \"start_date\", \"end_date\", \"articles_number\", \"mood\", \"last_published_date\", \"country_id\", \"load_date\")\n\ndef printQueryResultsAsTable(dataFrame: DataFrame): Unit = {\n    print(\"%table\\n\" + dataFrame.columns.mkString(\"\\t\") + '\\n' + dataFrame.map(x => x.mkString(\"\\t\")).collect().mkString(\"\\n\"))\n}\ndef getMoodFromArticle(tone: BigDecimal): String = {\n    if (tone >= 0.0) \"positive\" else \"negative\"\n}\n\ndef writeDataFrame(dataFrame: DataFrame, tableName: String, mode: SaveMode): Unit = {\n    println(dataFrame)\n    dataFrame.write\n            .format(\"jdbc\")\n            .mode(mode)\n            .option(\"driver\", \"com.mysql.jdbc.Driver\")\n            .option(\"url\", \"jdbc:mysql://maria-gdelt:3306/bd_gdelt\")\n            .option(\"databaseName\", \"bd_gdelt\")\n            .option(\"user\", \"root\")\n            .option(\"password\", \"root\")\n            .option(\"dbtable\", tableName)\n            .save()\n}\n",
   "user": "anonymous",
   "dateUpdated": "2020-01-20T00:17:47+0000",
   "config": {
    "colWidth": 12.0,
    "enabled": true,
    "results": {},
    "editorSetting": {}
   },
   "settings": {
    "params": {},
    "forms": {}
   },
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "\nimport org.apache.spark.sql.SaveMode\n\ncolumnNamesCountryToneForCountryIdAndDate: Seq[String] = List(id, related_month, start_date, end_date, articles_number, mood, last_published_date, country_id, load_date)\n\nprintQueryResultsAsTable: (dataFrame: org.apache.spark.sql.DataFrame)Unit\n\ngetMoodFromArticle: (tone: BigDecimal)String\n\nwriteDataFrame: (dataFrame: org.apache.spark.sql.DataFrame, tableName: String, mode: org.apache.spark.sql.SaveMode)Unit\n"
     }
    ]
   },
   "apps": [],
   "jobName": "paragraph_1579479460301_-441142537",
   "id": "20200120-001740_581626787",
   "dateCreated": "2020-01-20T00:17:40+0000",
   "dateStarted": "2020-01-20T00:17:40+0000",
   "dateFinished": "2020-01-20T00:17:42+0000",
   "status": "FINISHED",
   "progressUpdateIntervalMs": 500.0
  },
  {
   "text": "%spark\n\n// tu bedzie dfArticle.collect()\nfor (row <- dfArticle.take(15)) {\n\n    val publishedDate = row.getDate(0)\n    val dateEvent = row.getDate(1)\n    val tone = row.getDecimal(2)\n    val countryId = row.getString(3)\n    val articleMood = getMoodFromArticle(tone)\n\n    val sqlQueryForCountryToneGivenCountryIdAndDateEvent =\n        f\"\"\"(SELECT * FROM(SELECT ct.id, ct.related_month, ct.start_date, ct.end_date, ct.articles_number, ct.mood, ct.last_published_date, ct.country_id, ct.load_date FROM country_tone ct\n              WHERE end_date IS NULL\n              AND country_id = '$countryId'\n              AND YEAR(start_date) = YEAR(CAST($dateEvent AS DATE))\n              AND MONTH(start_date) = MONTH(CAST($dateEvent AS DATE))) joined_country_tone_for_countryid_and_date) AS country_tone_for_countryid_and_date \"\"\"\n\n    val dfCountryToneForCountryIdAndDate = getDataFrame(sqlQueryForCountryToneGivenCountryIdAndDateEvent, columnNamesCountryToneForCountryIdAndDate)\n\n    if (dfCountryToneForCountryIdAndDate.collect.length == 1) {\n        // row exists\n        println(\"case 1\")\n\n        val dfRow = dfCountryToneForCountryIdAndDate.first()\n        val lastPublishedDate = dfRow.getDate(6)\n\n        if (!(lastPublishedDate.compareTo(publishedDate) < 0)) {\n            println(\"case 2\")\n            // ignore old articles\n            val rowMood = dfRow.getString(5)\n\n            if (articleMood == rowMood) {\n                println(\"case 3\")\n                //update last_published_date\n                //increment articles_number\n                //update load_date=now()\n            }\n            else {\n                println(\"case 4\")\n                //insert end_date (now it is not null)\n                // new record related_month=related_month, start_date=in0.date_event, \n                // end_date=NULL, articles_number=1, mood=mood, last_published_date=in0.published_event, \n                // load_date=now(), countryid=in0.countryid\n            }\n        }\n    } else {\n        println(\"case 5\")\n        // row does not exist\n\n        // searching for opened intervals for this country\n        val sqlQueryForCountryToneGivenCountryId =\n            f\"\"\"(SELECT * FROM(SELECT ct.id, ct.related_month, ct.start_date, ct.end_date, ct.articles_number, ct.mood, ct.last_published_date, ct.country_id, ct.load_date FROM country_tone ct\n              WHERE end_date IS NULL\n              AND country_id = '$countryId') joined_country_tone_for_countryid) AS country_tone_for_countryid \"\"\"\n        val dfCountryToneForCountryId = getDataFrame(sqlQueryForCountryToneGivenCountryId, columnNamesCountryToneForCountryIdAndDate)\n\n        var dfFiltered = dfCountryToneForCountryId\n\n        for (notEndedRow <- dfCountryToneForCountryId.collect()) {\n            println(\"case 6\")\n            dfFiltered = dfFiltered.where(col(\"id\") =!= notEndedRow.getInt(0))\n\n            val newRecord = Seq(\n                (notEndedRow.getDate(1),\n                        notEndedRow.getDate(2),\n                        dateEvent, // update end_date = dateEvent\n                        notEndedRow.getInt(4),\n                        notEndedRow.getString(5),\n                        notEndedRow.getDate(6),\n                        notEndedRow.getString(7))\n            ).toDF(\"related_month\", \"start_date\", \"end_date\", \"articles_number\", \"mood\", \"last_published_date\", \"country_id\")\n            writeDataFrame(newRecord.toDF, \"country_tone\", SaveMode.Append)\n        }\n        // to nadpisuje ustawienia bazy!!!\n//        writeDataFrame(dfFiltered, \"country_tone\", SaveMode.Overwrite)\n\n        // new record\n        val newRecord = Seq(\n            (dateEvent,\n                    dateEvent,\n                    1,\n                    articleMood,\n                    publishedDate,\n                    countryId)\n        ).toDF(\"related_month\", \"start_date\", \"articles_number\", \"mood\", \"last_published_date\", \"country_id\")\n        writeDataFrame(newRecord.toDF, \"country_tone\", SaveMode.Append)\n    }\n}\n",
   "user": "anonymous",
   "dateUpdated": "2020-01-20T00:31:17+0000",
   "config": {},
   "settings": {
    "params": {},
    "forms": {}
   },
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "case 5\n[related_month: date, start_date: date ... 4 more fields]\ncase 5\n[related_month: date, start_date: date ... 4 more fields]\ncase 5\ncase 6\n[related_month: date, start_date: date ... 5 more fields]\n[related_month: date, start_date: date ... 4 more fields]\ncase 5\n[related_month: date, start_date: date ... 4 more fields]\ncase 5\ncase 6\n[related_month: date, start_date: date ... 5 more fields]\ncase 6\n[related_month: date, start_date: date ... 5 more fields]\n[related_month: date, start_date: date ... 4 more fields]\ncase 5\n[related_month: date, start_date: date ... 4 more fields]\ncase 5\n[related_month: date, start_date: date ... 4 more fields]\ncase 5\n[related_month: date, start_date: date ... 4 more fields]\ncase 5\ncase 6\n[related_month: date, start_date: date ... 5 more fields]\ncase 6\n[related_month: date, start_date: date ... 5 more fields]\ncase 6\n[related_month: date, start_date: date ... 5 more fields]\n[related_month: date, start_date: date ... 4 more fields]\ncase 5\n[related_month: date, start_date: date ... 4 more fields]\ncase 5\ncase 6\n[related_month: date, start_date: date ... 5 more fields]\n[related_month: date, start_date: date ... 4 more fields]\ncase 5\ncase 6\n[related_month: date, start_date: date ... 5 more fields]\n[related_month: date, start_date: date ... 4 more fields]\ncase 5\n[related_month: date, start_date: date ... 4 more fields]\ncase 5\n[related_month: date, start_date: date ... 4 more fields]\ncase 5\n[related_month: date, start_date: date ... 4 more fields]\n"
     }
    ]
   },
   "apps": [],
   "jobName": "paragraph_1579480277885_-382717067",
   "id": "20200120-003117_1503156050",
   "dateCreated": "2020-01-20T00:31:17+0000",
   "dateStarted": "2020-01-20T00:31:17+0000",
   "dateFinished": "2020-01-20T00:31:25+0000",
   "status": "FINISHED",
   "progressUpdateIntervalMs": 500.0
  }
 ],
 "name": "Zeppelin Notebook",
 "id": "",
 "noteParams": {},
 "noteForms": {},
 "angularObjects": {},
 "config": {
  "isZeppelinNotebookCronEnable": false,
  "looknfeel": "default",
  "personalizedMode": "false"
 },
 "info": {}
}